<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NProxy.Core</name>
    </assembly>
    <members>
        <member name="T:NProxy.Core.Interceptors.TargetInterceptor">
            <summary>
            Represents a target interceptor.
            </summary>
        </member>
        <member name="T:NProxy.Core.Interceptors.IInterceptor">
            <summary>
            Defines an interceptor.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.IInterceptor.Intercept(NProxy.Core.Interceptors.IInvocationContext)">
            <summary>
            Intercepts an invocation.
            </summary>
            <param name="invocationContext">The invocation context.</param>
            <returns>The return value.</returns>
        </member>
        <member name="F:NProxy.Core.Interceptors.TargetInterceptor.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.TargetInterceptor.Intercept(NProxy.Core.Interceptors.IInvocationContext)">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.TypeCache`1">
            <summary>
            Represents a type cache.
            </summary>
            <typeparam name="TDefinition">The definition type.</typeparam>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.TypeCache`2">
            <summary>
            Represents a type cache.
            </summary>
            <typeparam name="TDefinition">The definition type.</typeparam>
            <typeparam name="TKey">The key type.</typeparam>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.ITypeProvider`1">
            <summary>
            Defines a type provider.
            </summary>
            <typeparam name="TDefinition">The definition type.</typeparam>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeProvider`1.GetType(`0)">
            <summary>
            Returns a type based on the specified definition.
            </summary>
            <param name="definition">The definition.</param>
            <returns>The type.</returns>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.TypeCache`2._keyFactory">
            <summary>
            The key factory.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.TypeCache`2._typeProvider">
            <summary>
            The underlying type provider.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.TypeCache`2._knownTypes">
            <summary>
            The known types.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.TypeCache`2._knownTypesLock">
            <summary>
            The known types lock.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.TypeCache`2.#ctor(System.Func{`0,`1},NProxy.Core.Internal.Generators.ITypeProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Generators.TypeCache`2"/> class.
            </summary>
            <param name="keyFactory">The key factory.</param>
            <param name="typeProvider">The underlying type provider.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.TypeCache`2.GetType(`0)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.TypeCache`1.#ctor(NProxy.Core.Internal.Generators.ITypeProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Generators.TypeCache`1"/> class.
            </summary>
            <param name="typeProvider">The underlying type provider.</param>
        </member>
        <member name="T:NProxy.Core.Internal.Common.Visitor">
            <summary>
            Provides a set of static methods for creating visitors.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Common.Visitor.Create``1(System.Action{``0})">
            <summary>
            Creates a visitor for the specified visit action.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <param name="visit">The visit action.</param>
            <returns>The visitor with the specified implementation for the visit method.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.MethodBuilderExtensions">
            <summary>
            Represents method builder extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MethodBuilderExtensions.DefineParameters(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo)">
            <summary>
            Defines the method parameters.
            </summary>
            <param name="methodBuilder">The method builder.</param>
            <param name="declaringMethodInfo">The declaring method information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MethodBuilderExtensions.DefineParameters(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Defines the method parameters.
            </summary>
            <param name="methodBuilder">The method builder.</param>
            <param name="declaringMethodInfo">The declaring method information.</param>
            <param name="genericTypes">The generic types.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MethodBuilderExtensions.DefineGenericParameters(System.Reflection.Emit.MethodBuilder,System.Reflection.MethodBase)">
            <summary>
            Defines the generic method parameters.
            </summary>
            <param name="methodBuilder">The method builder.</param>
            <param name="declaringMethodBase">The declaring method base.</param>
            <returns>The generic parameter types.</returns>
            <remarks>
            Custom attributes are not considered by this method.
            </remarks>
        </member>
        <member name="T:NProxy.Core.ObjectExtensions">
            <summary>
            Represents object extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.ObjectExtensions.Adapt``1(System.Object)">
            <summary>
            Adapts a proxy object to the specified interface type.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="proxy">The proxy object.</param>
            <returns>The object, of the specified interface type, to which the proxy object has been adapted.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Definitions.ITypeActivator">
            <summary>
            Defines a type activator.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ITypeActivator.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Definitions.ITypeDefinition">
            <summary>
            Defines a type definition.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ITypeDefinition.VisitInterfaces(NProxy.Core.Internal.Common.IVisitor{System.Type})">
            <summary>
            Visits all interfaces.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ITypeDefinition.VisitConstructors(NProxy.Core.Internal.Common.IVisitor{System.Reflection.ConstructorInfo})">
            <summary>
            Visits all constructors.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ITypeDefinition.VisitEvents(NProxy.Core.Internal.Common.IVisitor{System.Reflection.EventInfo})">
            <summary>
            Visits all events.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ITypeDefinition.VisitProperties(NProxy.Core.Internal.Common.IVisitor{System.Reflection.PropertyInfo})">
            <summary>
            Visits all properties.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ITypeDefinition.VisitMethods(NProxy.Core.Internal.Common.IVisitor{System.Reflection.MethodInfo})">
            <summary>
            Visits all methods.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.ITypeDefinition.DeclaringType">
            <summary>
            Returns the declaring type.
            </summary>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.ITypeDefinition.ParentType">
            <summary>
            Returns the parent type.
            </summary>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.ITypeDefinition.CustomAttributes">
            <summary>
            Returns all custom attributes.
            </summary>
        </member>
        <member name="T:NProxy.Core.Interceptors.IInvocationTarget">
            <summary>
            Defines an invocation target.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.IInvocationTarget.GetTarget(System.Reflection.MethodInfo)">
            <summary>
            Returns the target object for the specified method.
            </summary>
            <param name="methodInfo">The method information.</param>
            <returns>The target object.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Common.AnonymousVisitor`1">
            <summary>
            Represents an anonymous visitor.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
        </member>
        <member name="T:NProxy.Core.Internal.Common.IVisitor`1">
            <summary>
            Defines a visitor.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
        </member>
        <member name="M:NProxy.Core.Internal.Common.IVisitor`1.Visit(`0)">
            <summary>
            Visits the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="F:NProxy.Core.Internal.Common.AnonymousVisitor`1._visit">
            <summary>
            The visit action.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Common.AnonymousVisitor`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Common.AnonymousVisitor`1"/> class.
            </summary>
            <param name="visit">The visit action.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Common.AnonymousVisitor`1.Visit(`0)">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.ProxyTypeGenerator">
            <summary>
            Represents a proxy type generator.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.ProxyTypeGenerator._typeBuilderFactory">
            <summary>
            The type builder factory.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.ProxyTypeGenerator._interceptionFilter">
            <summary>
            The interception filter.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ProxyTypeGenerator.#ctor(NProxy.Core.Internal.Generators.ITypeBuilderFactory,NProxy.Core.Internal.Generators.IInterceptionFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Generators.ProxyTypeGenerator"/> class.
            </summary>
            <param name="typeBuilderFactory">The type builder factory.</param>
            <param name="interceptionFilter">The interception filter.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ProxyTypeGenerator.GetType(NProxy.Core.Internal.Definitions.ITypeDefinition)">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Interceptors.Language.IInvokes`1">
            <summary>
            Defines the <c>Invokes</c> verb.
            </summary>
            <typeparam name="T">The declaring type.</typeparam>
        </member>
        <member name="T:NProxy.Core.Interceptors.Language.ITargets`1">
            <summary>
            Defines the <c>Targets</c> verb.
            </summary>
            <typeparam name="T">The declaring type.</typeparam>
        </member>
        <member name="T:NProxy.Core.Interceptors.Language.IFluent">
            <summary>
            Interface that is used to build fluent interfaces and hides methods declared by <see cref="T:System.Object"/>
            from IntelliSense.
            </summary>
            <remarks>
            Code that consumes implementations of this interface should expect one of two things:
            <list type="number">
            <item>
            When referencing the interface from within the same solution (project reference),
            you will still see the methods this interface is meant to hide.
            </item>
            <item>When referencing the interface through the compiled output assembly (external reference),
            the standard Object methods will be hidden as intended.
            </item>
            </list>
            See http://bit.ly/ifluentinterface for more information.
            </remarks> 
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IFluent.GetType">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetType"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IFluent.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IFluent.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IFluent.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.ITargets`1.Targets``1">
            <summary>
            Specifies an invocation target.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <returns>The proxy object.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.ITargets`1.Targets(System.Object)">
            <summary>
            Specifies an invocation target.
            </summary>
            <param name="target">The target object.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.ITargets`1.Targets(`0)">
            <summary>
            Specifies an invocation target.
            </summary>
            <param name="target">The target object.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.ITargets`1.Targets(NProxy.Core.Interceptors.IInvocationTarget)">
            <summary>
            Specifies an invocation target.
            </summary>
            <param name="invocationTarget">The invocation target.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.ITargets`1.TargetsSelf">
            <summary>
            Specifies an invocation target.
            </summary>
            <returns>The proxy object.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IInvokes`1.Invokes(NProxy.Core.Interceptors.IInterceptor[])">
            <summary>
            Specifies interceptors to invoke.
            </summary>
            <param name="interceptors">The interceptors.</param>
            <returns>The <c>Targets</c> verb.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator">
            <summary>
            Represents a method information type generator.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.GetMethodFromHandleMethodInfo">
            <summary>
            The <c>MethodBase.GetMethodFromHandle</c> method information.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.BaseInvokeMethodInfo">
            <summary>
            The <c>MethodInfoBase.BaseInvoke</c> method information.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.VirtualInvokeMethodInfo">
            <summary>
            The <c>MethodInfoBase.VirtualInvoke</c> method information.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator._typeEmitter">
            <summary>
            The type emitter.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.#ctor(NProxy.Core.Internal.Generators.ITypeEmitter)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator"/> class.
            </summary>
            <param name="typeEmitter">The type emitter.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.BuildTypeInitializer(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Type[],System.Reflection.FieldInfo)">
            <summary>
            Builds the type initializer.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="declaringMethodInfo">The declaring method information.</param>
            <param name="genericParameterTypes">The generic parameter types.</param>
            <param name="methodFieldInfo">The method information static field information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.BuildConstructor(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo)">
            <summary>
            Builds the constructor.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodFieldInfo">The method information static field information.</param>
            <returns>The constructor information.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.BuildInvokeMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Type[],System.Boolean)">
            <summary>
            Builds the invoke method.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="declaringMethodInfo">The declaring method information.</param>
            <param name="genericParameterTypes">The generic parameter types.</param>
            <param name="isVirtual">A value indicating weather the method should be called virtually.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.LoadArguments(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{System.Reflection.Emit.LocalBuilder})">
            <summary>
            Loads the arguments.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="parameterLocalBuilders">The parameter local builders.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.RestoreByReferenceArguments(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{System.Reflection.Emit.LocalBuilder})">
            <summary>
            Restores the by reference arguments.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="parameterLocalBuilders">The parameter local builders.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoTypeGenerator.GetType(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition">
            <summary>
            Represents an interface type definition.
            </summary>
        </member>
        <member name="T:NProxy.Core.Internal.Definitions.TypeDefinitionBase">
            <summary>
            Represents the type definition base class.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Definitions.TypeDefinitionBase._declaringType">
            <summary>
            The declaring type.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Definitions.TypeDefinitionBase._customAttributeInfos">
            <summary>
            The custom attribute informations.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Definitions.TypeDefinitionBase._declaringInterfaceTypes">
            <summary>
            The declaring interface types.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Definitions.TypeDefinitionBase._additionalInterfaceTypes">
            <summary>
            The additional interface types.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Definitions.TypeDefinitionBase"/> class.
            </summary>
            <param name="declaringType">The declaring type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.GetInterfaces(System.Type)">
            <summary>
            Returns all interfaces of the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The interface types.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.AddCustomAttribute(NProxy.Core.Internal.Reflection.AttributeInfo)">
            <summary>
            Adds the specified attribute information.
            </summary>
            <param name="attributeInfo">The attribute information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.AddInterface(System.Type)">
            <summary>
            Adds the specified interface type.
            </summary>
            <param name="interfaceType">The interface type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.CreateInstance(System.Type,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.VisitInterfaces(NProxy.Core.Internal.Common.IVisitor{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.VisitConstructors(NProxy.Core.Internal.Common.IVisitor{System.Reflection.ConstructorInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.VisitEvents(NProxy.Core.Internal.Common.IVisitor{System.Reflection.EventInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.VisitProperties(NProxy.Core.Internal.Common.IVisitor{System.Reflection.PropertyInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.VisitMethods(NProxy.Core.Internal.Common.IVisitor{System.Reflection.MethodInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.TypeDefinitionBase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.TypeDefinitionBase.DeclaringInterfaceTypes">
            <summary>
            Returns the declaring interface types.
            </summary>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.TypeDefinitionBase.AdditionalInterfaceTypes">
            <summary>
            Returns the additional interface types.
            </summary>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.TypeDefinitionBase.DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.TypeDefinitionBase.ParentType">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.TypeDefinitionBase.CustomAttributes">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition"/> class.
            </summary>
            <param name="declaringType">The declaring type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition.CreateInstance(System.Type,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition.VisitInterfaces(NProxy.Core.Internal.Common.IVisitor{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition.VisitEvents(NProxy.Core.Internal.Common.IVisitor{System.Reflection.EventInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition.VisitProperties(NProxy.Core.Internal.Common.IVisitor{System.Reflection.PropertyInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition.VisitMethods(NProxy.Core.Internal.Common.IVisitor{System.Reflection.MethodInfo})">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.InterfaceTypeDefinition.ParentType">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Common.ReadWriteLock">
            <summary>
            Represents a read write lock.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Common.ReadWriteLock._lock">
            <summary>
            The reader writer lock.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Common.ReadWriteLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Common.ReadWriteLock"/> class.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Common.ReadWriteLock.UpgradeableRead">
            <summary>
            Tries to enter the lock in upgradeable mode.
            </summary>
            <returns>A disposable to exit the lock from upgradeable mode.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Common.ReadWriteLock.Read">
            <summary>
            Tries to enter the lock in read mode.
            </summary>
            <returns>A disposable to exit the lock from read mode.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Common.ReadWriteLock.Write">
            <summary>
            Tries to enter the lock in write mode.
            </summary>
            <returns>A disposable to exit the lock from write mode.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.MemberInfoExtensions">
            <summary>
            Represents member information extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MemberInfoExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns the custom attributes that are applied to the specified member.
            </summary>
            <typeparam name="TAttribute">The type of attribute to search for. Only attributes that are assignable to this type are returned.</typeparam>
            <param name="memberInfo">The member information.</param>
            <param name="inherit">A value indicating whether to search the member's inheritance chain to find the attributes.</param>
            <returns>The custom attributes.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MemberInfoExtensions.IsDefined``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns a value indicating whether one or more attributes of the specified type or of its
            derived types is applied to this member.
            </summary>
            <typeparam name="TAttribute">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="memberInfo">The member information.</param>
            <param name="inherit">A value indicating whether to search the member's inheritance chain to find the attributes.</param>
            <returns>A value indicating weather the member is annotated with the specified custom attribute type.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MemberInfoExtensions.GetDeclaringType(System.Reflection.MemberInfo)">
            <summary>
            Returns the declaring type of the specified member.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>The declaring type.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MemberInfoExtensions.GetFullName(System.Reflection.MemberInfo)">
            <summary>
            Returns the full name of the member.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MemberInfoExtensions.GetToken(System.Reflection.MemberInfo)">
            <summary>
            Returns a value which uniquely identifies a member.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>The unique identifier.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Common.EnumerableExtensions">
            <summary>
            Represents enumerable extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Common.EnumerableExtensions.Visit``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Visits all elements of the specified enumeration.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <param name="elements">The element enumeration.</param>
            <param name="visit">The visit action.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Common.EnumerableExtensions.Visit``1(System.Collections.Generic.IEnumerable{``0},NProxy.Core.Internal.Common.IVisitor{``0})">
            <summary>
            Visits all elements of the specified enumeration.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <param name="elements">The element enumeration.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="T:NProxy.Core.Interceptors.Language.INewProxy`1">
            <summary>
            Defines a fluent interface for configuring a new proxy.
            </summary>
            <typeparam name="T">The declaring type.</typeparam>
        </member>
        <member name="T:NProxy.Core.Interceptors.Language.IExtends`1">
            <summary>
            Defines the <c>Extends</c> verb.
            </summary>
            <typeparam name="T">The declaring type.</typeparam>
        </member>
        <member name="T:NProxy.Core.Interceptors.Language.IImplements`1">
            <summary>
            Defines the <c>Implements</c> verb.
            </summary>
            <typeparam name="T">The declaring type.</typeparam>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IImplements`1.Implements``1">
            <summary>
            Specifies an interface to implement.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <returns>The <c>Implements</c> verb.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IImplements`1.Implements(System.Type[])">
            <summary>
            Specifies interfaces to implement.
            </summary>
            <param name="interfaceTypes">The interface types.</param>
            <returns>The <c>Implements</c> verb.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IExtends`1.Extends``1">
            <summary>
            Specifies a mixin to extend.
            </summary>
            <typeparam name="TMixin">The mixin type.</typeparam>
            <returns>The <c>Extends</c> verb.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.Language.IExtends`1.Extends(System.Object[])">
            <summary>
            Specifies mixins to extend.
            </summary>
            <param name="mixins">The mixin objects.</param>
            <returns>The <c>Extends</c> verb.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Definitions.DelegateTypeDefinition">
            <summary>
            Represents a delegate type definition.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Definitions.DelegateTypeDefinition.DelegateMethodName">
            <summary>
            The name of the delegate method.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.DelegateTypeDefinition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Definitions.DelegateTypeDefinition"/> class.
            </summary>
            <param name="declaringType">The declaring type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.DelegateTypeDefinition.CreateInstance(System.Type,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.DelegateTypeDefinition.VisitInterfaces(NProxy.Core.Internal.Common.IVisitor{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.DelegateTypeDefinition.VisitEvents(NProxy.Core.Internal.Common.IVisitor{System.Reflection.EventInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.DelegateTypeDefinition.VisitProperties(NProxy.Core.Internal.Common.IVisitor{System.Reflection.PropertyInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.DelegateTypeDefinition.VisitMethods(NProxy.Core.Internal.Common.IVisitor{System.Reflection.MethodInfo})">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.DelegateTypeDefinition.ParentType">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Common.AnonymousDisposable">
            <summary>
            Represents an anonymous disposable.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Common.AnonymousDisposable._dispose">
            <summary>
            The dispose action.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Common.AnonymousDisposable._disposed">
            <summary>
            A value indicating weather this <see cref="T:NProxy.Core.Internal.Common.AnonymousDisposable"/> was already disposed.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Common.AnonymousDisposable.#ctor(System.Action{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Common.AnonymousDisposable"/> class.
            </summary>
            <param name="dispose">The dispose action.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Common.AnonymousDisposable.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:NProxy.Core.Internal.Common.AnonymousDisposable"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Common.AnonymousDisposable.Dispose(System.Boolean)">
            <summary>
            Dispose this <see cref="T:NProxy.Core.Internal.Common.AnonymousDisposable"/>.
            </summary>
            <param name="disposing">A value indicating weather disposing is in progress.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Common.AnonymousDisposable.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.ProxyTypeBuilder">
            <summary>
            Represents a proxy type builder.
            </summary>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.ITypeBuilder">
            <summary>
            Defines a type builder.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeBuilder.AddCustomAttribute(NProxy.Core.Internal.Reflection.AttributeInfo)">
            <summary>
            Adds the specified custom attribute.
            </summary>
            <param name="attributeInfo">The attribute information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeBuilder.AddInterface(System.Type)">
            <summary>
            Adds the specified interface.
            </summary>
            <param name="interfaceType">The interface type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeBuilder.BuildConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Builds a constructor based on the specified constructor information.
            </summary>
            <param name="declaringConstructorInfo">The declaring constructor information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeBuilder.BuildEvent(System.Reflection.EventInfo)">
            <summary>
            Builds an event based on the specified event information.
            </summary>
            <param name="declaringEventInfo">The declaring event information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeBuilder.BuildProperty(System.Reflection.PropertyInfo)">
            <summary>
            Builds a property based on the specified property information.
            </summary>
            <param name="declaringPropertyInfo">The declaring property information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeBuilder.BuildMethod(System.Reflection.MethodInfo)">
            <summary>
            Builds a method based on the specified method information.
            </summary>
            <param name="declaringMethodInfo">The declaring method information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeBuilder.CreateType">
            <summary>
            Creates the type.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilder.InvokeMethodInfo">
            <summary>
            The <c>IInvocationHandler.Invoke</c> method information.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilder._parentType">
            <summary>
            The parent type.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilder._typeBuilder">
            <summary>
            The type builder.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilder._methodInfoTypeProvider">
            <summary>
            The method information type provider.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilder._invocationHandlerFieldInfo">
            <summary>
            The invocation handler field information.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilder._interfaceTypes">
            <summary>
            The interface types.
            </summary>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.#ctor(System.Type,NProxy.Core.Internal.Generators.ITypeEmitter,NProxy.Core.Internal.Generators.ITypeProvider{System.Reflection.MethodInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.ProxyTypeBuilder"/> class.
            </summary>
            <param name="parentType">The parent type.</param>
            <param name="typeEmitter">The type emitter.</param>
            <param name="methodInfoTypeProvider">The method information type provider.</param>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.BuildInterceptedMethod(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Builds an intercepted method based on the specified method information.
            </summary>
            <param name="declaringMethodInfo">The declaring method information.</param>
            <param name="isExplicit">A value indicating weather the specified method should be implemented explicitly.</param>
            <returns>The intercepted method builder.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.GetMethodInfoConstructor(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Returns a method information constructor for the specified declaring method information.
            </summary>
            <param name="declaringMethodInfo">The declaring method information.</param>
            <param name="genericParameterTypes">The generic parameter types.</param>
            <returns>The method information constructor information.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.LoadParameters(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IList{System.Type},System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads the parameters.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="parametersLocalBuilder">The parameters local builder.</param>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.RestoreByReferenceParameters(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IList{System.Type},System.Reflection.Emit.LocalBuilder)">
            <summary>
            Restores the by reference parameters.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="parametersLocalBuilder">The parameters local builder.</param>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.IsOverrideMethod(System.Reflection.MethodBase)">
            <summary>
            Returns a value indicating weather the specified method should be overridden.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>A value indicating weather the specified method should be overridden.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.IsExplicitMember(System.Reflection.MemberInfo)">
            <summary>
            Returns a value indicating weather the specified member should be implemented explicitly.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>A value indicating weather the specified member should be implemented explicitly.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.AddCustomAttribute(NProxy.Core.Internal.Reflection.AttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.AddInterface(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.BuildConstructor(System.Reflection.ConstructorInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.BuildEvent(System.Reflection.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.BuildProperty(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.BuildMethod(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilder.CreateType">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Interceptors.ProxyFactoryExtensions">
            <summary>
            Represents proxy factory extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.ProxyFactoryExtensions.NewProxy``1(NProxy.Core.IProxyFactory,System.Object[])">
            <summary>
            Returns a fluent interface for configuring a new proxy.
            </summary>
            <typeparam name="T">The declaring type.</typeparam>
            <param name="proxyFactory">The proxy factory.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>A fluent interface for configuring a new proxy.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.PropertyInfoExtensions">
            <summary>
            Represents property information extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.PropertyInfoExtensions.CanOverride(System.Reflection.PropertyInfo)">
            <summary>
            Returns a value indicating weather the specified property is overrideable.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>A value indicating weather the specified property is overrideable.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.PropertyInfoExtensions.IsAbstract(System.Reflection.PropertyInfo)">
            <summary>
            Returns a value indicating weather the specified property is abstract.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>A value indicating weather the specified property is abstract.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.PropertyInfoExtensions.GetAccessorMethods(System.Reflection.PropertyInfo)">
            <summary>
            Returns the accessor methods.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>The accessor method informations.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.PropertyInfoExtensions.GetIndexParameterTypes(System.Reflection.PropertyInfo)">
            <summary>
            Returns the index parameter types of the specified property.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>The index parameter types.</returns>
        </member>
        <member name="T:NProxy.Core.Interceptors.MixinInvocationHandler">
            <summary>
            Represents a mixin invocation handler.
            </summary>
        </member>
        <member name="T:NProxy.Core.IInvocationHandler">
            <summary>
            Defines an invocation handler.
            </summary>
        </member>
        <member name="M:NProxy.Core.IInvocationHandler.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Processes an invocation on a target object.
            </summary>
            <param name="proxy">The proxy object.</param>
            <param name="methodInfo">The method information.</param>
            <param name="parameters">The parameter values.</param>
            <returns>The return value.</returns>
        </member>
        <member name="F:NProxy.Core.Interceptors.MixinInvocationHandler._invocationHandler">
            <summary>
            The next invocation handler.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.MixinInvocationHandler._mixins">
            <summary>
            The mixin objects.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.MixinInvocationHandler.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Object},NProxy.Core.IInvocationHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Interceptors.MixinInvocationHandler"/> class.
            </summary>
            <param name="mixins">The mixin objects.</param>
            <param name="invocationHandler">The next invocation handler.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.MixinInvocationHandler.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Common.VisitorExtensions">
            <summary>
            Provides a set of static methods for query operations over visitors.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Common.VisitorExtensions.Where``1(NProxy.Core.Internal.Common.IVisitor{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the elements of a visitor based on a predicate.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="predicate">The predicate.</param>
            <returns>A visitor that propagates only elements that satisfy the condition.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.AttributeInfo">
            <summary>
            Represents attribute information.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Reflection.AttributeInfo.EmptyObjects">
            <summary>
            An empty object array.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Reflection.AttributeInfo._attributeType">
            <summary>
            The attribute type.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Reflection.AttributeInfo._argumentTypes">
            <summary>
            The argument types.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Reflection.AttributeInfo._arguments">
            <summary>
            The arguments.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.AttributeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Reflection.AttributeInfo"/> class.
            </summary>
            <param name="attributeType">The attribute type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.AttributeInfo.#ctor(System.Type,System.Type[],System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Reflection.AttributeInfo"/> class.
            </summary>
            <param name="attributeType">The attribute type.</param>
            <param name="argumentTypes">The argument types.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="P:NProxy.Core.Internal.Reflection.AttributeInfo.AttributeType">
            <summary>
            Returns the attribute type.
            </summary>
        </member>
        <member name="P:NProxy.Core.Internal.Reflection.AttributeInfo.ArgumentTypes">
            <summary>
            Returns the argument types.
            </summary>
        </member>
        <member name="P:NProxy.Core.Internal.Reflection.AttributeInfo.Arguments">
            <summary>
            Returns the arguments.
            </summary>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.MethodInfoExtensions">
            <summary>
            Represents method information extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MethodInfoExtensions.MapGenericMethod(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Maps a method to the specified generic types.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="genericTypes">The generic types.</param>
            <returns>The mapped method information.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MethodInfoExtensions.MapGenericReturnType(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Maps a return type to the specified generic types.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="genericTypes">The generic types.</param>
            <returns>The mapped return type.</returns>
        </member>
        <member name="T:NProxy.Core.Interceptors.IInterceptionBehavior">
            <summary>
            Defines an interception behavior.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.IInterceptionBehavior.Apply(System.Reflection.MemberInfo,System.Collections.Generic.ICollection{NProxy.Core.Interceptors.IInterceptor})">
            <summary>
            Applies the interception behavior.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="interceptors">The interceptors.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.IInterceptionBehavior.Validate(System.Reflection.MemberInfo)">
            <summary>
            Validates the interception behavior.
            </summary>
            <param name="memberInfo">The member information.</param>
        </member>
        <member name="T:NProxy.Core.Interceptors.InterceptorInvocationHandler">
            <summary>
            Represents an interceptor invocation handler.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.InterceptorInvocationHandler._defaultInterceptors">
            <summary>
            The default interceptors.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.InterceptorInvocationHandler._interceptors">
            <summary>
            The interceptors.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.InterceptorInvocationHandler.#ctor(NProxy.Core.Interceptors.IInterceptor[])">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Interceptors.InterceptorInvocationHandler"/> class.
            </summary>
            <param name="defaultInterceptors">The default interceptor.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.InterceptorInvocationHandler.ApplyInterceptors(System.Type,System.Boolean,System.Collections.Generic.IEnumerable{NProxy.Core.Interceptors.IInterceptor})">
            <summary>
            Applies all interceptors for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="inherit">A value indicating whether to search the type's inheritance chain to find interception behaviors.</param>
            <param name="interceptors">The interceptors.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.InterceptorInvocationHandler.ApplyInterceptors(System.Reflection.EventInfo,System.Boolean,System.Collections.Generic.IEnumerable{NProxy.Core.Interceptors.IInterceptor})">
            <summary>
            Applies all interceptors for the specified event.
            </summary>
            <param name="eventInfo">The event information.</param>
            <param name="inherit">A value indicating whether to search the event's inheritance chain to find interception behaviors.</param>
            <param name="interceptors">The interceptors.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.InterceptorInvocationHandler.ApplyInterceptors(System.Reflection.PropertyInfo,System.Boolean,System.Collections.Generic.IEnumerable{NProxy.Core.Interceptors.IInterceptor})">
            <summary>
            Applies all interceptors for the specified property.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="inherit">A value indicating whether to search the property's inheritance chain to find interception behaviors.</param>
            <param name="interceptors">The interceptors.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.InterceptorInvocationHandler.ApplyInterceptors(System.Reflection.MethodInfo,System.Boolean,System.Collections.Generic.IEnumerable{NProxy.Core.Interceptors.IInterceptor})">
            <summary>
            Applies all interceptors for the specified method.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="inherit">A value indicating whether to search the method's inheritance chain to find interception behaviors.</param>
            <param name="interceptors">The interceptors.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.InterceptorInvocationHandler.ApplyInterceptionBehaviors(System.Reflection.MemberInfo,System.Boolean,System.Collections.Generic.IEnumerable{NProxy.Core.Interceptors.IInterceptor})">
            <summary>
            Applies the interception behaviors for the specified member.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="inherit">A value indicating whether to search the member's inheritance chain to find interception behaviors.</param>
            <param name="interceptors">The interceptors.</param>
            <returns>The member interceptors.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.InterceptorInvocationHandler.GetInterceptors(System.Reflection.MemberInfo)">
            <summary>
            Returns all interceptors for the specified member.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>The interceptors.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.InterceptorInvocationHandler.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Definitions.ClassTypeDefinition">
            <summary>
            Represents a class type definition.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ClassTypeDefinition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Definitions.ClassTypeDefinition"/> class.
            </summary>
            <param name="declaringType">The declaring type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ClassTypeDefinition.CreateInstance(System.Type,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ClassTypeDefinition.VisitInterfaces(NProxy.Core.Internal.Common.IVisitor{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ClassTypeDefinition.VisitEvents(NProxy.Core.Internal.Common.IVisitor{System.Reflection.EventInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ClassTypeDefinition.VisitProperties(NProxy.Core.Internal.Common.IVisitor{System.Reflection.PropertyInfo})">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Definitions.ClassTypeDefinition.VisitMethods(NProxy.Core.Internal.Common.IVisitor{System.Reflection.MethodInfo})">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Definitions.ClassTypeDefinition.ParentType">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Interceptors.InvocationTargetInterceptor">
            <summary>
            Represents an invocation target interceptor.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.InvocationTargetInterceptor._invocationTarget">
            <summary>
            The invocation target.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.InvocationTargetInterceptor.#ctor(NProxy.Core.Interceptors.IInvocationTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Interceptors.InvocationTargetInterceptor"/> class.
            </summary>
            <param name="invocationTarget">The invocation target.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.InvocationTargetInterceptor.Intercept(NProxy.Core.Interceptors.IInvocationContext)">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.EventInfoExtensions">
            <summary>
            Represents event information extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.EventInfoExtensions.CanOverride(System.Reflection.EventInfo)">
            <summary>
            Returns a value indicating weather the specified event is overrideable.
            </summary>
            <param name="eventInfo">The event information.</param>
            <returns>A value indicating weather the specified event is overrideable.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.EventInfoExtensions.IsAbstract(System.Reflection.EventInfo)">
            <summary>
            Returns a value indicating weather the specified event is abstract.
            </summary>
            <param name="eventInfo">The event information.</param>
            <returns>A value indicating weather the specified event is abstract.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.EventInfoExtensions.GetAccessorMethods(System.Reflection.EventInfo)">
            <summary>
            Returns the accessor methods.
            </summary>
            <param name="eventInfo">The event information.</param>
            <returns>The accessor method informations.</returns>
        </member>
        <member name="T:NProxy.Core.Interceptors.NewProxy`1">
            <summary>
            Represents a fluent interface implementation for configuring a new proxy.
            </summary>
            <typeparam name="T">The declaring type.</typeparam>
        </member>
        <member name="F:NProxy.Core.Interceptors.NewProxy`1._proxyFactory">
            <summary>
            The proxy factory.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.NewProxy`1._arguments">
            <summary>
            The constructor arguments.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.NewProxy`1._mixins">
            <summary>
            The mixin objects.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.NewProxy`1._interfaceTypes">
            <summary>
            The interface types.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.NewProxy`1._interceptors">
            <summary>
            The interceptors.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.#ctor(NProxy.Core.IProxyFactory,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Interceptors.NewProxy`1"/> class.
            </summary>
            <param name="proxyFactory">The proxy factory.</param>
            <param name="arguments">The constructor arguments.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.AddMixin(System.Object)">
            <summary>
            Adds a mixin.
            </summary>
            <param name="mixin">The mixin object.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.AddMixin(System.Type,System.Object)">
            <summary>
            Adds a mixin for the specified interface type.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="mixin">The mixin object.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.AddInterface(System.Type)">
            <summary>
            Adds an interface type.
            </summary>
            <param name="interfaceType">The interface type.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.CreateInvocationHandler(System.Type,NProxy.Core.Interceptors.IInterceptor[])">
            <summary>
            Creates an invocation handler.
            </summary>
            <param name="declaringType">The declaring type.</param>
            <param name="defaultInterceptors">The default interceptors.</param>
            <returns>The invocation handler.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Extends``1">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Extends(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Implements``1">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Implements(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Invokes(NProxy.Core.Interceptors.IInterceptor[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Targets``1">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Targets(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Targets(`0)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.Targets(NProxy.Core.Interceptors.IInvocationTarget)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Interceptors.NewProxy`1.TargetsSelf">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Interceptors.IInvocationContext">
            <summary>
            Defines an invocation context.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.IInvocationContext.Proceed">
            <summary>
            Proceed to the next interceptor in the interceptor chain.
            </summary>
            <returns>The return value of the next method in the chain.</returns>
        </member>
        <member name="P:NProxy.Core.Interceptors.IInvocationContext.Target">
            <summary>
            Returns the target object. 
            </summary>
        </member>
        <member name="P:NProxy.Core.Interceptors.IInvocationContext.Method">
            <summary>
            Returns the method of the target class for which the interceptor was invoked.
            </summary>
        </member>
        <member name="P:NProxy.Core.Interceptors.IInvocationContext.Parameters">
            <summary>
            Returns the parameter values that will be passed to the method of the target class.
            </summary>
        </member>
        <member name="T:NProxy.Core.ProxyFactory">
            <summary>
            Represents a proxy factory.
            </summary>
        </member>
        <member name="T:NProxy.Core.IProxyFactory">
            <summary>
            Defines a proxy factory.
            </summary>
        </member>
        <member name="M:NProxy.Core.IProxyFactory.CreateProxy(System.Type,System.Collections.Generic.IEnumerable{System.Type},NProxy.Core.IInvocationHandler,System.Object[])">
            <summary>
            Creates a proxy object.
            </summary>
            <param name="declaringType">The declaring type.</param>
            <param name="interfaceTypes">The additional interface types.</param>
            <param name="invocationHandler">The invocation handler.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="M:NProxy.Core.IProxyFactory.CreateProxy``1(System.Collections.Generic.IEnumerable{System.Type},NProxy.Core.IInvocationHandler,System.Object[])">
            <summary>
            Creates a proxy object.
            </summary>
            <typeparam name="T">The declaring type.</typeparam>
            <param name="interfaceTypes">The additional interface types.</param>
            <param name="invocationHandler">The invocation handler.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="F:NProxy.Core.ProxyFactory._typeProvider">
            <summary>
            The type provider.
            </summary>
        </member>
        <member name="M:NProxy.Core.ProxyFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.ProxyFactory"/> class.
            </summary>
        </member>
        <member name="M:NProxy.Core.ProxyFactory.#ctor(NProxy.Core.Internal.Generators.ITypeBuilderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.ProxyFactory"/> class.
            </summary>
            <param name="typeBuilderFactory">The type builder factory.</param>
        </member>
        <member name="M:NProxy.Core.ProxyFactory.#ctor(NProxy.Core.Internal.Generators.ITypeProvider{NProxy.Core.Internal.Definitions.ITypeDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.ProxyFactory"/> class.
            </summary>
            <param name="typeProvider">The type provider.</param>
        </member>
        <member name="M:NProxy.Core.ProxyFactory.InternalCreateProxy(System.Type,System.Collections.Generic.IEnumerable{System.Type},NProxy.Core.IInvocationHandler,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a proxy for the specified declaring type.
            </summary>
            <param name="declaringType">The declaring type.</param>
            <param name="interfaceTypes">The additional interface types.</param>
            <param name="invocationHandler">The invocation handler.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>The proxy.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyFactory.CreateTypeDefinition(System.Type)">
            <summary>
            Returns a type definition for the specified declaring type.
            </summary>
            <param name="declaringType">The declaring type.</param>
            <returns>The type definition.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyFactory.CreateProxy(System.Type,System.Collections.Generic.IEnumerable{System.Type},NProxy.Core.IInvocationHandler,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.ProxyFactory.CreateProxy``1(System.Collections.Generic.IEnumerable{System.Type},NProxy.Core.IInvocationHandler,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.NonInterceptedAttribute">
            <summary>
            Represents an attribute which indicates that an event, property or method should not be intercepted.
            </summary>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.MethodBaseExtensions">
            <summary>
            Represents method base extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MethodBaseExtensions.CanOverride(System.Reflection.MethodBase)">
            <summary>
            Returns a value indicating weather the specified method is overrideable.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>A value indicating weather the specified method is overrideable.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MethodBaseExtensions.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Returns the parameter types of the specified method.
            </summary>
            <param name="methodBase">The method base.</param>
            <returns>The parameter types.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.MethodBaseExtensions.MapGenericParameterTypes(System.Reflection.MethodBase,System.Type[])">
            <summary>
            Maps the parameter types to the specified generic types.
            </summary>
            <param name="methodBase">The method base.</param>
            <param name="genericTypes">The generic types.</param>
            <returns>The mapped parameter types.</returns>
        </member>
        <member name="T:NProxy.Core.DefaultInterceptionFilter">
            <summary>
            Represents the default interception filter.
            </summary>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.IInterceptionFilter">
            <summary>
            Defines an interception filter.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.IInterceptionFilter.Accept(System.Reflection.EventInfo)">
            <summary>
            Accepts the specified event information.
            </summary>
            <param name="eventInfo">The event information.</param>
            <returns>A value indicating weather the specified event information is accepted.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.IInterceptionFilter.Accept(System.Reflection.PropertyInfo)">
            <summary>
            Accepts the specified property information.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns>A value indicating weather the specified property information is accepted.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.IInterceptionFilter.Accept(System.Reflection.MethodInfo)">
            <summary>
            Accepts the specified method information.
            </summary>
            <param name="methodInfo">The method information.</param>
            <returns>A value indicating weather the specified method information is accepted.</returns>
        </member>
        <member name="F:NProxy.Core.DefaultInterceptionFilter.FinalizeMethodName">
            <summary>
            The name of the finalize method.
            </summary>
        </member>
        <member name="M:NProxy.Core.DefaultInterceptionFilter.Accept(System.Reflection.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.DefaultInterceptionFilter.Accept(System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.DefaultInterceptionFilter.Accept(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.ITypeEmitter">
            <summary>
            Defines a type emitter.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeEmitter.DefineType(System.String,System.Type)">
            <summary>
            Constructs a type builder.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="parentType">The parent type.</param>
            <returns>The type builder.</returns>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.ITypeBuilderFactory">
            <summary>
            Defines a type builder factory.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.ITypeBuilderFactory.CreateBuilder(System.Type)">
            <summary>
            Creates a type builder.
            </summary>
            <param name="parentType">The parent type.</param>
            <returns>The type builder.</returns>
        </member>
        <member name="T:NProxy.Core.Interceptors.InvocationContext">
            <summary>
            Represents an invocation context.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.InvocationContext._target">
            <summary>
            The target object.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.InvocationContext._methodInfo">
            <summary>
            The method information.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.InvocationContext._parameters">
            <summary>
            The parameter values.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.InvocationContext._interceptors">
            <summary>
            The interceptors.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.InvocationContext._nextInterceptorIndex">
            <summary>
            The index of the next interceptor.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.InvocationContext.#ctor(System.Object,System.Reflection.MethodInfo,System.Object[],NProxy.Core.Interceptors.IInterceptor[])">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Interceptors.InvocationContext"/> class.
            </summary>
            <param name="target">The target object.</param>
            <param name="methodInfo">The method information.</param>
            <param name="parameters">The parameter values.</param>
            <param name="interceptors">The interceptors.</param>
        </member>
        <member name="M:NProxy.Core.Interceptors.InvocationContext.GetNextInterceptor">
            <summary>
            Returns the next interceptor in the interceptor chain.
            </summary>
            <returns>The next interceptor.</returns>
        </member>
        <member name="M:NProxy.Core.Interceptors.InvocationContext.Proceed">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Interceptors.InvocationContext.Target">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Interceptors.InvocationContext.Method">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Interceptors.InvocationContext.Parameters">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.TypeExtensions">
            <summary>
            Represents type extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.IsDelegate(System.Type)">
            <summary>
            Returns a value indicating weather the specified type is a delegate.
            </summary>
            <param name="type">The type.</param>
            <returns>A value indicating weather the specified type is a delegate.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.IsVoid(System.Type)">
            <summary>
            Returns a value indicating weather the specified type is void.
            </summary>
            <param name="type">The type.</param>
            <returns>A value indicating weather the specified type is void.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.GetFullName(System.Type)">
            <summary>
            Returns the full name of the type.
            </summary>
            <param name="type">The type.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Returns the method information that reflects the method that matches the specified criterias.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The method name.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The method information.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.MapGenericType(System.Type,System.Type[])">
            <summary>
            Maps a type to the specified generic types.
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypes">The generic types.</param>
            <returns>The mapped type.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.MapGenericArguments(System.Type,System.Type[])">
            <summary>
            Maps the generic arguments to the specified generic types.
            </summary>
            <param name="type">The type.</param>
            <param name="genericTypes">The generic types.</param>
            <returns>The mapped generic arguments.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.VisitInterfaces(System.Type,NProxy.Core.Internal.Common.IVisitor{System.Type})">
            <summary>
            Visits all interfaces of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.VisitConstructors(System.Type,NProxy.Core.Internal.Common.IVisitor{System.Reflection.ConstructorInfo})">
            <summary>
            Visits all constructors of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.VisitEvents(System.Type,NProxy.Core.Internal.Common.IVisitor{System.Reflection.EventInfo})">
            <summary>
            Visits all events of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.VisitProperties(System.Type,NProxy.Core.Internal.Common.IVisitor{System.Reflection.PropertyInfo})">
            <summary>
            Visits all properties of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeExtensions.VisitMethods(System.Type,NProxy.Core.Internal.Common.IVisitor{System.Reflection.MethodInfo})">
            <summary>
            Visits all methods of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.TypeBuilderExtensions">
            <summary>
            Represents type builder extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.DefineGenericParameters(System.Reflection.Emit.TypeBuilder,System.Type[])">
            <summary>
            Defines the generic type parameters.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="genericTypes">The generic types.</param>
            <returns>The generic parameter types.</returns>
            <remarks>
            Custom attributes are not considered by this method.
            </remarks>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.SetCustomAttribute(System.Reflection.Emit.TypeBuilder,System.Type,System.Type[],System.Object[])">
            <summary>
            Sets the specified custom attribute.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="attributeType">The attribute type.</param>
            <param name="argumentTypes">The argument types.</param>
            <param name="arguments">The constructor argument.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.DefineConstructor(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.String[])">
            <summary>
            Defines a constructor.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="methodAttributes">The method attributes.</param>
            <param name="callingConvention">The calling convention.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="parameterNames">The parameter names.</param>
            <returns>The constructor builder.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.DefineParameters(System.Reflection.Emit.ConstructorBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Defines the constructor parameters.
            </summary>
            <param name="constructorBuilder">The constructor builder.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.DefineConstructor(System.Reflection.Emit.TypeBuilder,System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Defines a constructor based on the specified declaring constructor.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="declaringConstructorInfo">The declaring constructor information.</param>
            <param name="additionalParameterTypes">The additional parameter types.</param>
            <param name="additionalParameterNames">The additional parameter names.</param>
            <returns>The constructor builder.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.DefineParameters(System.Reflection.Emit.ConstructorBuilder,System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Defines the constructor parameters.
            </summary>
            <param name="constructorBuilder">The constructor builder.</param>
            <param name="declaringConstructorInfo">The declaring constructor information.</param>
            <param name="additionalParameterNames">The additional parameter names.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.DefineEvent(System.Reflection.Emit.TypeBuilder,System.Reflection.EventInfo,System.Boolean,System.Func{System.Reflection.MethodInfo,System.Boolean,System.Reflection.Emit.MethodBuilder})">
            <summary>
            Defines an event based on the specified declaring event.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="declaringEventInfo">The declaring event information.</param>
            <param name="isExplicit">A value indicating weather the specified event should be implemented explicitly.</param>
            <param name="methodBuilderFactory">The method builder factory function.</param>
            <returns>The event builder.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.DefineProperty(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo,System.Boolean,System.Func{System.Reflection.MethodInfo,System.Boolean,System.Reflection.Emit.MethodBuilder})">
            <summary>
            Defines a property based on the specified declaring property.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="declaringPropertyInfo">The declaring property information.</param>
            <param name="isExplicit">A value indicating weather the specified property should be implemented explicitly.</param>
            <param name="methodBuilderFactory">The method builder factory function.</param>
            <returns>The property builder.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.TypeBuilderExtensions.DefineMethod(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
            <summary>
            Defines a method based on the specified declaring method.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="declaringMethodInfo">The declaring method information.</param>
            <param name="isExplicit">A value indicating weather the specified method should be implemented explicitly.</param>
            <param name="isOverride">A value indicating weather the specified method should be overridden.</param>
            <returns>The method builder.</returns>
        </member>
        <member name="T:NProxy.Core.Interceptors.SingleInvocationTarget">
            <summary>
            Represents a single invocation target.
            </summary>
        </member>
        <member name="F:NProxy.Core.Interceptors.SingleInvocationTarget._target">
            <summary>
            The target object.
            </summary>
        </member>
        <member name="M:NProxy.Core.Interceptors.SingleInvocationTarget.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Interceptors.SingleInvocationTarget"/> class.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:NProxy.Core.Interceptors.SingleInvocationTarget.GetTarget(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.ProxyAttribute">
            <summary>
            Represents an attribute which indicates that a class is a proxy.
            </summary>
        </member>
        <member name="T:NProxy.Core.Internal.Generators.MethodInfoBase">
            <summary>
            Represents the method information base class.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.MethodInfoBase._proxy">
            <summary>
            The proxy object.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.MethodInfoBase._methodInfo">
            <summary>
            The declaring method information.
            </summary>
        </member>
        <member name="F:NProxy.Core.Internal.Generators.MethodInfoBase._isOverride">
            <summary>
            A value indicating weather the specified method is overridden.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.#ctor(System.Object,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.Internal.Generators.MethodInfoBase"/> class.
            </summary>
            <param name="proxy">The proxy object.</param>
            <param name="methodInfo">The declaring method information.</param>
            <param name="isOverride">A value indicating weather the specified method is overridden.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.BaseInvoke(System.Object,System.Object[])">
            <summary>
            Invokes the base method represented by the current instance.
            </summary>
            <param name="target">The target object.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.VirtualInvoke(System.Object,System.Object[])">
            <summary>
            Invokes the virtual method represented by the current instance.
            </summary>
            <param name="target">The target object.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetBaseDefinition">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetGenericMethodDefinition">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.MakeGenericMethod(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetGenericArguments">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetMethodBody">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetMethodImplementationFlags">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetParameters">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetCustomAttributes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.IsDefined(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetCustomAttributesData">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.Internal.Generators.MethodInfoBase.ToString">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.ReturnParameter">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.ReturnType">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.ReturnTypeCustomAttributes">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.CallingConvention">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.ContainsGenericParameters">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.IsGenericMethod">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.IsGenericMethodDefinition">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.MethodHandle">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.DeclaringType">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.MemberType">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.MetadataToken">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.Module">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:NProxy.Core.Internal.Generators.MethodInfoBase.ReflectedType">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.ProxyTypeBuilderFactory">
            <summary>
            Represents a proxy type builder factory.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilderFactory.DynamicAssemblyName">
            <summary>
            The dynamic assembly name.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilderFactory.DynamicModuleName">
            <summary>
            The dynamic module name.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilderFactory.DynamicAssemblyKeyPairResourceName">
            <summary>
            The dynamic assembly key pair resource name.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilderFactory._methodInfoTypeProvider">
            <summary>
            The method information type provider.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilderFactory._assemblyBuilder">
            <summary>
            The assembly builder.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilderFactory._moduleBuilder">
            <summary>
            The module builder.
            </summary>
        </member>
        <member name="F:NProxy.Core.ProxyTypeBuilderFactory._nextTypeId">
            <summary>
            The next type id.
            </summary>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilderFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NProxy.Core.ProxyTypeBuilderFactory"/> class.
            </summary>
            <param name="canSaveAssembly">A value indicating weather the assembly can be saved.</param>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilderFactory.GetDynamicAssemblyKeyPair">
            <summary>
            Returns the dynamic assembly key pair.
            </summary>
            <returns>The dynamic assembly key pair.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilderFactory.GetBytes(System.IO.Stream)">
            <summary>
            Returns all bytes read from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>All bytes read from the specified stream.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilderFactory.GetExecutingAssemblyName">
            <summary>
            Returns the executing assembly name.
            </summary>
            <returns>The assembly name.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilderFactory.GetDynamicAssemblyName(System.String)">
            <summary>
            Returns the dynamic assembly name.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <returns>The assembly name.</returns>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilderFactory.SaveAssembly(System.String)">
            <summary>
            Saves the dynamic assembly to disk.
            </summary>
            <param name="path">The path of the assembly.</param>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilderFactory.DefineType(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NProxy.Core.ProxyTypeBuilderFactory.CreateBuilder(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:NProxy.Core.Internal.Reflection.ILGeneratorExtensions">
            <summary>
            Intermediate language generator extensions.
            </summary>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.ILGeneratorExtensions.EmitCall(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls the specified method.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="methodInfo">The method information.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.ILGeneratorExtensions.EmitLoadArguments(System.Reflection.Emit.ILGenerator,System.Int32,System.Int32)">
            <summary>
            Loads the arguments onto the stack.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="offset">The argument offset.</param>
            <param name="count">The argument count.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.ILGeneratorExtensions.ThrowException(System.Reflection.Emit.ILGenerator,System.Type,System.String)">
            <summary>
            Throws a new exception of the specified exception type.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="exceptionType">The exception type.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.ILGeneratorExtensions.NewArray(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
            <summary>
            Creates a new array of the specified element type.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="elementType">The element type.</param>
            <param name="size">The array size.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.ILGeneratorExtensions.EmitBox(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts a value type to an object reference.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.ILGeneratorExtensions.EmitUnbox(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the boxed representation of a specified type to its unboxed form.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.ILGeneratorExtensions.EmitLoadIndirect(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Loads a value from an address.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:NProxy.Core.Internal.Reflection.ILGeneratorExtensions.EmitStoreIndirect(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Stores a value to an address.
            </summary>
            <param name="ilGenerator">The intermediate language generator.</param>
            <param name="type">The type.</param>
        </member>
    </members>
</doc>
